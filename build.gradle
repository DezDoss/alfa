plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}


group = 'com.veon.eurasia'
version = '0.0.1-SHAPSHOT'
sourceCompatibility = '11'

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = [
            'configDir': rootProject.file('config/checkstyle'),
            'baseDir'  : rootDir,
    ]
    toolVersion = '8.11'
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco-ut")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacoco-ut")
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    jaxb
}

repositories {
    mavenCentral()
}

task copyDependencies(type: Copy) {
    from configurations.compileOnly
    into "${buildDir}/sonar"
}

ext {
    set('springCloudVersion', "2021.0.0")
}

// tag::wsdl[]
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schemaDir = "src/main/resources/wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir,) {
                schema(dir: ext.schemaDir, includes: '**/*.wsdl')
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}
// end::wsdl[]

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'javax.xml.soap:javax.xml.soap-api:1.4.0'
    implementation 'com.sun.xml.messaging.saaj:saaj-impl:1.5.1'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.4'

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.2'

    implementation 'org.springframework.ws:spring-ws-core'

    implementation 'org.glassfish.jaxb:jaxb-runtime'
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))

    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    implementation 'javax.xml.bind:jaxb-api:2.3.1'


    annotationProcessor 'org.projectlombok:lombok'

    // Mapstruct
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        destinationFile = file("$buildDir/jacoco-ut/jacoco.exec")
    }
}


